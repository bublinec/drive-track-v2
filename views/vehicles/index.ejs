<%- include("../partials/header") %> 

<h1 class="mt-4">Dashboard</h1>

<div class="row">
    <div class="col-xl-6">
        <div class="card mb-4">
            <div class="card-header"><i class="fas fa-chart-area mr-1"></i>Drive per day</div>
            <div class="card-body"><canvas id="driveByDayChart" width="100%" height="40"></canvas></div>
        </div>
    </div>
    <div class="col-xl-6">
        <div class="card mb-4">
            <div class="card-header"><i class="fas fa-chart-bar mr-1"></i>Drive by months</div>
            <div class="card-body"><canvas id="driveByMonthChart" width="100%" height="40"></canvas></div>
        </div>
    </div>
    <div class="col-lg-6">
      <div class="card mb-4">
          <div class="card-header"><i class="fas fa-car mr-1"></i>Vehicles</div>
          <div class="card-body"><canvas id="vehiclesChart" width="100%" height="50"></canvas></div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card mb-4">
          <div class="card-header"><i class="fas fa-users mr-1"></i>Drivers</div>
          <div class="card-body"><canvas id="driversChart" width="100%" height="50"></canvas></div>
      </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js" crossorigin="anonymous"></script>
<script>
// ************************************************
// GET DATA 
// ************************************************

// return true if two dates are the same day
Date.prototype.isSameDateAs = function(pDate) {
  return (
    this.getFullYear() === pDate.getFullYear() &&
    this.getMonth() === pDate.getMonth() &&
    this.getDate() === pDate.getDate()
  );
}

// return true if two dates are in the same month
Date.prototype.isSameMonthAs = function(pDate) {
  return (
    this.getFullYear() === pDate.getFullYear() &&
    this.getMonth() === pDate.getMonth()
  );
}

// return arr of all rides (most recent first)
function getRides(user){
    var rides = [];
    user.vehicles.forEach(function(vehicle){
        vehicle.rides.forEach(function(ride){
            rides.push(ride);
        });
    });
    return rides.reverse();
};

// return object (map/dict) with driver:km
function getDriversKm(rides){
  drivers_km = {};
  rides.forEach(function(ride){
    if(drivers_km[ride.driver]){
      drivers_km[ride.driver] += ride.distance;
    }
    else{
      drivers_km[ride.driver] = ride.distance;
    }
  })
  return drivers_km;
}

// return array of vehicles and km per vehicle
function getVehiclesKm(user){
  vehicles = [];
  km_per_vehicle = [];
  user.vehicles.forEach(function(vehicle){
        km = 0
        vehicle.rides.forEach(function(ride){
            km += ride.distance;
        });
        vehicles.push(vehicle.brand + " " + vehicle.model)
        km_per_vehicle.push(km)
      });
  return [vehicles, km_per_vehicle]
}

// return array of last n months and distance driven
function getDriveByMonths(rides, n=6){
    var month_names = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var months = [];
    var drive_by_months = [];
    var today = new Date();
    var compared_date, ride_date, distance;

    for(var i = n-1; i >= 0; i -= 1){
        distance = 0;
        compared_date = new Date(today.getFullYear(), today.getMonth() - i, 1);
        rides.forEach(function(ride){
            ride_date = new Date(ride.date);
            if(ride_date.isSameMonthAs(compared_date)){
                distance += ride.distance
            }   
        });
        months.push(month_names[compared_date.getMonth()]);
        drive_by_months.push(distance);
    }
    return [months, drive_by_months];
};

// return array of last n days and distance driven
function getDriveByDays(rides, n=7){
    var days = [];
    var drive_by_days = [];
    var today = new Date();
    var compared_date, ride_date, distance;

    for(var i = n-1; i >= 0; i -= 1){
        distance = 0;
        compared_date = new Date(today.getFullYear(), today.getMonth(), today.getDate() - i);
        rides.forEach(function(ride){
            ride_date = new Date(ride.date);
            if(ride_date.isSameDateAs(compared_date)){
                distance += ride.distance
            }   
        });
        days.push(compared_date.getDate().toString() + "." + compared_date.getMonth().toString() + ".");
        drive_by_days.push(distance);
    }
    return [days, drive_by_days];
};


// get actual data for the current user
var user = <%- JSON.stringify(current_user) %>;
var rides = getRides(user);
var drive_by_months = getDriveByMonths(rides, 10);
var drive_by_days = getDriveByDays(rides, 7);
var drivers_km = getDriversKm(rides);
var km_per_vehicle = getVehiclesKm(user);


// ************************************************
// CHARTS CONFIG
// ************************************************

// Set new default font family and font color to mimic Bootstrap's default styling
Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
Chart.defaults.global.defaultFontColor = '#292b2c';

// DRIVE BY MONTH BAR CHART
var ctx = document.getElementById("driveByMonthChart");
var myLineChart = new Chart(ctx, {
type: 'bar',
data: {
    labels: drive_by_months[0],
    datasets: [{
    label: "Km driven",
    backgroundColor: "rgba(2,117,216,1)",
    borderColor: "rgba(2,117,216,1)",
    data: drive_by_months[1]
    }],
},
options: {
    scales: {
    xAxes: [{
        time: {
        unit: 'month'
        },
        gridLines: {
        display: false
        },
        ticks: {
        maxTicksLimit: 6
        }
    }],
    yAxes: [{
        ticks: {
        min: 0,
        maxTicksLimit: 5
        },
        gridLines: {
        display: true
        }
    }],
    },
    legend: {
      display: false
    }
  }
});

// DRIVE BY DAY AREA CHART
var ctx = document.getElementById("driveByDayChart");
var myLineChart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: drive_by_days[0],
    datasets: [{
      label: "Km driven",
      lineTension: 0.3,
      backgroundColor: "rgba(2,117,216,0.2)",
      borderColor: "rgba(2,117,216,1)",
      pointRadius: 5,
      pointBackgroundColor: "rgba(2,117,216,1)",
      pointBorderColor: "rgba(255,255,255,0.8)",
      pointHoverRadius: 5,
      pointHoverBackgroundColor: "rgba(2,117,216,1)",
      pointHitRadius: 50,
      pointBorderWidth: 2,
      data: drive_by_days[1],
    }],
  },
  options: {
    scales: {
      xAxes: [{
        time: {
          unit: 'date'
        },
        gridLines: {
          display: false
        },
        ticks: {
          maxTicksLimit: 7
        }
      }],
      yAxes: [{
        ticks: {
          min: 0,
          maxTicksLimit: 5
        },
        gridLines: {
          color: "rgba(0, 0, 0, .125)",
        }
      }],
    },
    legend: {
      display: false
    }
  }
});

// VEHICLES PIE CHART
var ctx = document.getElementById("vehiclesChart");
var myPieChart = new Chart(ctx, {
  type: 'pie',
  data: {
    labels: km_per_vehicle[0],
    datasets: [{
      data: km_per_vehicle[1],
      backgroundColor: ['#007bff', '#dc3545', '#ffc107', '#28a745'],
    }],
  },
  options: {
    legend: {
      display: false
    }
  }
});


// DRIVERS PIE CHART
var ctx = document.getElementById("driversChart");
var myPieChart = new Chart(ctx, {
  type: 'pie',
  data: {
    labels: Object.keys(drivers_km),
    datasets: [{
      data: Object.values(drivers_km),
      backgroundColor: ['#007bff', '#dc3545', '#ffc107', '#28a745'],
    }],
  },
  options: {
    legend: {
      display: false
    }
  }
});

</script>

<%- include("../partials/footer") %> 